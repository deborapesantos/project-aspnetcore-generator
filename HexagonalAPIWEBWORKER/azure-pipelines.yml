trigger:
  - develop
  - main

pool:
  vmImage: "ubuntu-latest"

variables:
  AWS_REGION: "us-east-1"
  AWS_ACCESS_KEY_ID: "stub"
  AWS_SECRET_ACCESS_KEY: "stub"
  ECR_REPOSITORY_HLG: "stub"
  ECR_REPOSITORY_PRD: "stub"
  ECR_WORKER_REPOSITORY_HLG: "stub"
  ECR_WORKER_REPOSITORY_PRD: "stub"
  DOCKER_IMAGE_TAG: "latest"
  ASPNETCORE_ENVIRONMENT: ""
  ECR_REPOSITORY: ""

stages:
  - stage: BuildAPI
    jobs:
      - job: BuildAndPushAPI
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "6.x" # Altere para a versão do .NET SDK que você está utilizando

          - script: |             
              cd src/ports/HexagonalAPIWEBWORKER.Ports.API             
              dotnet restore
              dotnet build --configuration Release
            displayName: "Build - projeto .NET"

          - script: |
              if [ "$(Build.SourceBranchName)" == "develop" ]; then
                echo "Homologation environment selected."
                echo "##vso[task.setvariable variable=ASPNETCORE_ENVIRONMENT]Staging"
                echo "##vso[task.setvariable variable=ECR_REPOSITORY]$(ECR_REPOSITORY_HLG)"
              elif [ "$(Build.SourceBranchName)" == "main" ]; then
                echo "Production environment selected."
                echo "##vso[task.setvariable variable=ASPNETCORE_ENVIRONMENT]"
                echo "##vso[task.setvariable variable=ECR_REPOSITORY]$(ECR_REPOSITORY_PRD)"
              else
                echo "Unknown branch; defaulting to homologation."
                echo "##vso[task.setvariable variable=ASPNETCORE_ENVIRONMENT]Staging"
                echo "##vso[task.setvariable variable=ECR_REPOSITORY]$(ECR_REPOSITORY_HLG)"
              fi
            displayName: "Configura variáveis de ambiente"

          - script: |
              echo $(System.DefaultWorkingDirectory)/src
              cd $(System.DefaultWorkingDirectory)
              docker build --no-cache -t $(ECR_REPOSITORY):$(DOCKER_IMAGE_TAG) -f Dockerfile .
            displayName: "Build - Imagem Docker API"

          - script: |
              echo "Configuring AWS CLI"
              aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
              aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
              aws configure set default.region $(AWS_REGION)
            displayName: "Configura AWS CLI"

          - script: |
              aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(ECR_REPOSITORY)
            displayName: "Login na Amazon ECR"

          - script: |
              docker push $(ECR_REPOSITORY):$(DOCKER_IMAGE_TAG)
            displayName: "Publica Imagem Docker no ECR"

  - stage: BuildWorker
    jobs:
      - job: BuildAndPushWorker
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "6.x" # Altere para a versão do .NET SDK que você está utilizando

          - script: |             
              cd src/ports/HexagonalAPIWEBWORKER.Ports.Worker             
              dotnet restore
              dotnet build --configuration Release
            displayName: "Build - projeto .NET worker"

          - script: |
              if [ "$(Build.SourceBranchName)" == "develop" ]; then
                echo "Homologation environment selected."
                echo "##vso[task.setvariable variable=ASPNETCORE_ENVIRONMENT]Staging"
                echo "##vso[task.setvariable variable=ECR_REPOSITORY]$(ECR_REPOSITORY_HLG)"
              elif [ "$(Build.SourceBranchName)" == "main" ]; then
                echo "Production environment selected."
                echo "##vso[task.setvariable variable=ASPNETCORE_ENVIRONMENT]"
                echo "##vso[task.setvariable variable=ECR_REPOSITORY]$(ECR_REPOSITORY_PRD)"
              else
                echo "Unknown branch; defaulting to homologation."
                echo "##vso[task.setvariable variable=ASPNETCORE_ENVIRONMENT]Staging"
                echo "##vso[task.setvariable variable=ECR_REPOSITORY]$(ECR_REPOSITORY_HLG)"
              fi
            displayName: "Configura variáveis de ambiente"

          - script: |
              echo $(System.DefaultWorkingDirectory)/src
              cd $(System.DefaultWorkingDirectory)
              docker build --no-cache -t $(ECR_REPOSITORY):$(DOCKER_IMAGE_TAG) -f DockerfileWorker .
            displayName: "Build - Imagem Docker"

          - script: |
              echo "Configuring AWS CLI"
              aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
              aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
              aws configure set default.region $(AWS_REGION)
            displayName: "Configura AWS CLI"

          - script: |
              aws ecr get-login-password --region $(AWS_REGION) | docker login --username AWS --password-stdin $(ECR_REPOSITORY)
            displayName: "Login na Amazon ECR"

          - script: |
              docker push $(ECR_REPOSITORY):$(DOCKER_IMAGE_TAG)
            displayName: "Publica Imagem Docker no ECR"
